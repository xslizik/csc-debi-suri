{
  "title" : "debi-suri",
  "description" : null,
  "prerequisites" : [ ],
  "outcomes" : [ ],
  "state" : "UNRELEASED",
  "show_stepper_bar" : true,
  "levels" : [ {
    "title" : "Introduction level",
    "level_type" : "INFO_LEVEL",
    "order" : 0,
    "estimated_duration" : 0,
    "minimal_possible_solve_time" : null,
    "content" : "# Intro to network traffic analysis excercise\n\n**Please read all the provided information carefully.**\n\nThis exercise consists of 6 levels and serves as an introduction to network traffic analysis, utilizing tools like IDPS Suricata, Wireshark, and iptables. The website you will be trying to protect in later exercises will be DVWA. Make sure to read the instructions properly for every level because you can easily block yourself out. After the exercise, you will be prompted to fill out a short evaluation.\n\n## Flags\n\nIn each level, your task is to find a flag and submit it here in KYPO Portal. The length of each flag is 28 except for the excercise encrypted, where the flag has exactly 10 random charactes, and suspicious, where the flag ends with `_.zip`. Specifics on how to find each flag will be thoroughly explained in each level. The number of flag submitions is limited to 100.\n\n## Points\n\nThe amount of points gained for each level will depend on the amount of hints used in that level. After revealing the solution you are not eligible to any points for the level.\n\n----\n\nIf you encounter any issues with KYPO or the exercise please contact `xslizik@stuba.sk` or your lecturer.\n\n\n<sub>This exercise was created by `Ján Sližik`.</sub>"
  }, {
    "title" : "Get Access",
    "level_type" : "ACCESS_LEVEL",
    "order" : 1,
    "estimated_duration" : 0,
    "minimal_possible_solve_time" : null,
    "passkey" : "start",
    "cloud_content" : "# Get access\n\nYou can access your virtual machine directly in the browser or through SSH.\n\n## Browser access (recommended)\nPreferably use the Mozilla Firefox browser with the tab pinned to access Guacamole service.\n\nRight-click the `kali` icon in the topology and choose `Open GUI`. Then log in with the following credentials:\n\n`<student>:<student>`\n\nRight-click the `monitor` icon in the topology and choose `Open console`. Then log in with the following credentials:\n\n`<monitor>:<monitor>`\n\n## SSH access\n\nFor accessing KYPO virtual machines using your local command-line tool:\n1. Click on `Get SSH access` button to download ZIP file.\n2. Extract `ssh-access.zip` to the `~/.ssh/` directory (if you are on Windows and the folder is missing, create it here: `C:\\Users\\USERNAME\\.ssh`). It contains 3 files: SSH configuration file (`pool-id-ID-sandbox-id-ID-user-config`) and both keys (private and public).\n3. Connect using `ssh -F ~/.ssh/pool-id-ID-sandbox-id-ID-user-config <vm_name>`. Example: `ssh -F ~/.ssh/pool-id-51-sandbox-id-58-user-config attacker` (or `ssh -F %USERPROFILE%/.ssh/pool-id-51-sandbox-id-58-user-config attacker` on Windows)\n\nYou can find more information in the [documentation](https://docs.crp.kypo.muni.cz/user-guide-advanced/sandboxes/sandbox-access/#user-access).\n\n# Additional Access\n\n```\nuse mozilla 10.10.20.5:80 to access DVWA\nuse mozilla 10.10.20.5:5636 to access Evebox\nuse mozilla localhost:8080 to access Malicious Flag Checker API\nuse ssh monitor@10.10.20.5 to accesss into debi-suri with password monitor\n```\n\n# Additional tools on Kali include \n\n```\nwireshark &\nburpsuite &\n```\n\n# Continue\n\nWhen you are ready to advance to the next phase, submit `start` as the answer.",
    "local_content" : "`// It is advised not to build the sandboxes locally`\n\nYou are not expected to build this sandbox locally."
  }, {
    "title" : "Excercise 1: investigate",
    "level_type" : "TRAINING_LEVEL",
    "order" : 2,
    "estimated_duration" : 1,
    "minimal_possible_solve_time" : null,
    "answer" : null,
    "answer_variable_name" : "first_flag",
    "content" : "You've been assigned the task of investigating  pcap record captured by an IDS gateway. The suspicion of malicious activity prompts you to delve deep into the data to uncover any potential threats signifying a Remote Access Trojan on your network.\n\nYour first step is to examine the iptables configuration on debi-suri machine to ensure the INPUT chain is functioning properly using `sudo iptables-save > iptables`. Be sure to restore them afterward.\n\nNext, delve into the Suricata configuration file, suricata.yaml, to ensure it's properly configured. Verify that the `HOME_NET` variable is set to your enp0s8 adapter ip address range and that the ip ranges for the local network (192.168.0.0/16) and docker networking (172.0.0.0/8) are specified as well. Ensure logging includes relevant data for thorough investigation, such as L2 addresses, and enables alerting for payload and HTTP body.\n\nThen, you're tasked with updating Suricata's rule-set to include the latest open-source rules from Emerging Threats (ET/OPEN). Don't forget to specify the correct directory for updating rules.\n\nFinally, run custom script, `/home/monitor/pcap_suri.sh`, on the captured pcap file located in `/home/monitor/excercises/investigate` to extract crucial details about the malicious activity.\n\nCarefully investigate alerts, and provide the first 28 signs of amazon password, which was stolen by an attacker.\n\nhttps://docs.suricata.io/en/suricata-7.0.1/index.html\n\n```\nExcercise1 = +25/100p\nHint1      = -2p\nHint2      = -2p\nHint3      = -5p\n```",
    "solution" : "### iptables\nchange the order of INPUT CHAIN so that drop rule is last, and port 5636 is set to ACCEPT \n```\nsudo iptables-save > iptables\nnano iptables\nsudo iptables-restore < iptables\n```\n\n### suricata.yaml\n```\nHOME_NET: \"[10.10.20.0/24, 192.168.0.0/16, 172.0.0.0/8]\"\neve-log: \n    ethernet: yes\nalert:\n    payload: yes\n    http-body: yes\n```\n\n### suricata update\nyou can either use -D /etc/suricata or default rule-file path, which has to be changed in suricata.yaml\n```\nsudo suricata-update -D /etc/suricata\nsudo suricata-update update-sources -D /etc/suricata\nsudo suricata-update enable-source et/open -D /etc/suricata\nsudo suricata-update -D /etc/suricata\n```\n\n### investigate\n```\n/home/monitor/pcap_suri.sh /home/monitor/excercises/investigate/investigate.pcap\n```",
    "solution_penalized" : true,
    "hints" : [ {
      "title" : "investigate",
      "content" : "all alerts matter, make sure suricata.yaml is adjusted properly\n\n```\nHOME_NET: \"[10.10.20.0/24, 192.168.0.0/16, 172.0.0.0/8]\"\neve-log: \n    ethernet: yes\nalert:\n    payload: yes\n    http-body: yes\n```",
      "hint_penalty" : 5,
      "order" : 2
    }, {
      "title" : "iptables",
      "content" : "order matters, evebox runs on port 5636",
      "hint_penalty" : 2,
      "order" : 0
    }, {
      "title" : "suricata-update",
      "content" : "sudo suricata-update -D /etc/suricata",
      "hint_penalty" : 2,
      "order" : 1
    } ],
    "incorrect_answer_limit" : 100,
    "attachments" : [ ],
    "max_score" : 25,
    "variant_answers" : true,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  }, {
    "title" : "Excercise 2: suspicious",
    "level_type" : "TRAINING_LEVEL",
    "order" : 3,
    "estimated_duration" : 1,
    "minimal_possible_solve_time" : null,
    "answer" : "Ref_Sept24-2020.zip",
    "answer_variable_name" : null,
    "content" : "Your task is post attack analysis of Dridex Infection. Export suspicious objects using Wireshark. The answer is the name of the actual file which has been stored on the victims machine ending with `_.zip`. The file is located in `/home/monitor/excercises/suspicious`\n\n```\nExcercise2 = +10/100p\n```",
    "solution" : "### wireshark\n```\nscp to your machine\nopen with wireshark &\nFILE > export objects>HTTP>app.php\n```",
    "solution_penalized" : true,
    "hints" : [ ],
    "incorrect_answer_limit" : 100,
    "attachments" : [ ],
    "max_score" : 10,
    "variant_answers" : false,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  }, {
    "title" : "Excercise 3: encrypted",
    "level_type" : "TRAINING_LEVEL",
    "order" : 4,
    "estimated_duration" : 1,
    "minimal_possible_solve_time" : null,
    "answer" : null,
    "answer_variable_name" : "second_flag",
    "content" : "A significant portion of today's traffic is encrypted using HTTPS, making it challenging to detect malicious payloads without decryption. However, JA3 fingerprints can be leveraged to identify specific malware variants based on TLS Client Hello packets.\n\nAnalyze post-Trickbot malware infection within the `/home/monitor/exercises/encrypted` directory using Wireshark. Try to identify the first malicious JA3 hash. I suggest searching for it on the internet. Change the Suricata rule with `SID sid:906200012` to detect the specific variant of the Trickbot malware based on JA3 fingerprints.\n\nConfigure Suricata to use ja3fingerprints.rules and utilize JA3 fingerprints by modifying the suricata.yaml.\n\nTest the Suricata rule by running Suricata with the modified configuration and observing if alerts are triggered for the Trickbot malware traffic. The flag is hidden inside the first malicious packet's payload.\n\nhttps://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/?gi=c6dd5a5ad356\n\n```\nExcercise3 = +10/100p\nHint1      = -2p\nHint2      = -5p\n```",
    "solution" : "### wireshark\n```\nscp to your machine\nopen with wireshark &\nfilter out tls.handshake.type == 1\nsearch for every ja3 hash on the internet until you find the malicious one\n72a589da586844d7f0818ce684948eea\n```\n\n### suricata.yaml\n```\nja3-fingerprints: yes\nrule-files:\n    - /home/monitor/excercises/ja3fingerprints.rules\n```\n\n### ja3fingerprints.rules \n```\nalert tls any any -> any any (msg:\"SSLBL: Malicious JA3 SSL-Client Fingerprint detected (Trickbot)\"; ja3.hash; content:\"72a589da586844d7f0818ce684948eea\"; sid:906200012; rev:1;)\n```",
    "solution_penalized" : true,
    "hints" : [ {
      "title" : "ja3hash",
      "content" : "### wireshark\n```\nja3/ja3s TLS/SSL fingerprint\nja3 hash: <hash>\ncopy value, search for it on the internet until you find the malicious one\n```",
      "hint_penalty" : 5,
      "order" : 1
    }, {
      "title" : "wireshark",
      "content" : "tls.handshake.type == 1",
      "hint_penalty" : 2,
      "order" : 0
    } ],
    "incorrect_answer_limit" : 100,
    "attachments" : [ ],
    "max_score" : 10,
    "variant_answers" : true,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  }, {
    "title" : "Excercise 4: protect sqli",
    "level_type" : "TRAINING_LEVEL",
    "order" : 5,
    "estimated_duration" : 1,
    "minimal_possible_solve_time" : null,
    "answer" : null,
    "answer_variable_name" : "third_flag",
    "content" : "In this scenario, your goal is to set up Suricata as an Intrusion Prevention System (IPS) to protect a Docker web application, DVWA, which operates on port 80. You'll configure Suricata to act as a gateway for DVWA and establish three basic rules for its security.\n\nFirst, restart the DVWA Database by accessing http://10.10.20.5/setup.php.\n\nThen, activate Suricata IPS as a service. You can find a preconfigured service file at `/etc/systemd/system`, so you just need to start it using systemctl. Make sure it's running properly by checking its status.\n\nUpdate iptables by clearing all rules from the input chain since Suricata will now handle this.\n\nRun these commands:\n```\nsudo iptables -I INPUT -j NFQUEUE --queue-num 0\nsudo iptables -I OUTPUT -j NFQUEUE --queue-num 0\nsudo iptables -I FORWARD -j NFQUEUE --queue-num 0\n```\n\nNavigate to Malicious API located at http://localhost:8080 on Kali. This API sends malicious requests to DVWA. Your task is to block these requests. After creating your own rules, ensure to test them using the same command as in suricata.service, but with the addition of `-T`. If they pass the test, you can proceed to restart Suricata as a service.\n\nFor the fourth flag attempt to create a drop rule to prevent malicious SQL injection payload 1' OR '1'='1'# to http://10.10.20.5/vulnerabilities/sqli/\n\n```\nExcercise4 = +35/100p\nHint1      = -2p\n```",
    "solution" : "### restart DVWA database\nhttp://10.10.20.5/setup.php\n\n### enable suricata IPS as a service\n\n```\nsudo systemctl enable suricata.service\nsudo systemctl start suricata.service\nsudo systemctl status suricata.service\n```\n\n### set up IPS iptables\nget rid of INPUT, OUTPUT chain completely\n```\nsudo iptables-save > iptables\nnano iptables\nsudo iptables-restore < iptables\n```\n\nthen run these commands\n```\nsudo iptables -I INPUT -j NFQUEUE --queue-num 0\nsudo iptables -I OUTPUT -j NFQUEUE --queue-num 0\nsudo iptables -I FORWARD -j NFQUEUE --queue-num 0\n```\n\n### suricata.yaml\n```\nrule-files:\n    - /path/to/your/rules\n```\n\n### custom rule\ndrop http $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"SQL Injection Attack Prevented\"; flow:to_server,established; content:\"/vulnerabilities/sqli/\"; http_uri; content:\"id=\"; http_uri; content:\"'\"; http_uri; sid:1000001; rev:1;)\n\n```\nsudo systemctl restart suricata.service\n```\n\n### navigate to localhost:8080, where you use post SQLi",
    "solution_penalized" : true,
    "hints" : [ {
      "title" : "sqli rule",
      "content" : "specify the url you want to block in content eg. content: /vulnerabilities/sqli/, and malicious signs such as '",
      "hint_penalty" : 2,
      "order" : 0
    } ],
    "incorrect_answer_limit" : 100,
    "attachments" : [ ],
    "max_score" : 35,
    "variant_answers" : true,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  }, {
    "title" : "Excercise 5: protect login",
    "level_type" : "TRAINING_LEVEL",
    "order" : 6,
    "estimated_duration" : 1,
    "minimal_possible_solve_time" : null,
    "answer" : null,
    "answer_variable_name" : "fourth_flag",
    "content" : "For the fifth flag, devise a drop rule to hinder external attempts to log in as an administrator to http://10.10.20.5/vulnerabilities/brute/.\n\n```\nExcercise5 = +10/100p\nHint1      = -2p\n```",
    "solution" : "### restart DVWA database\nhttp://10.10.20.5/setup.php\n\n### enable suricata IPS as a service\n\n```\nsudo systemctl enable suricata.service\nsudo systemctl start suricata.service\nsudo systemctl status suricata.service\n```\n\n### set up IPS iptables\nget rid of INPUT, OUTPUT chain completely\n```\nsudo iptables-save > iptables\nnano iptables\nsudo iptables-restore < iptables\n```\n\nthen run these commands\n```\nsudo iptables -I INPUT -j NFQUEUE --queue-num 0\nsudo iptables -I OUTPUT -j NFQUEUE --queue-num 0\nsudo iptables -I FORWARD -j NFQUEUE --queue-num 0\n```\n\n### suricata.yaml\n```\nrule-files:\n    - /path/to/your/rules\n```\n\n### custom rule\ndrop http $EXTERNAL_NET any -> $HOME_NET $HTTP_PORTS (msg:\"Prevented login as admin from external network\"; content:\"/vulnerabilities/brute/?username=admin\"; nocase; sid:1000003; rev:1;)\n\n```\nsudo systemctl restart suricata.service\n```\n\n### navigate to localhost:8080, where you use post Admin Login",
    "solution_penalized" : true,
    "hints" : [ {
      "title" : "admin login rule",
      "content" : "use burpsuite to intercept specific get request ",
      "hint_penalty" : 2,
      "order" : 0
    } ],
    "incorrect_answer_limit" : 100,
    "attachments" : [ ],
    "max_score" : 10,
    "variant_answers" : true,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  }, {
    "title" : "Excercise 6: protect xss",
    "level_type" : "TRAINING_LEVEL",
    "order" : 7,
    "estimated_duration" : 1,
    "minimal_possible_solve_time" : null,
    "answer" : null,
    "answer_variable_name" : "fifth_flag",
    "content" : "For the sixth flag, formulate a drop rule to prevent a simple reflected XSS attack <script>alert(\"uwu\")</script> to http://10.10.20.5/vulnerabilities/xss_r/.\n\n```\nExcercise6 = +10/100p\nHint1      = -2p\n```",
    "solution" : "### restart DVWA database\nhttp://10.10.20.5/setup.php\n\n### enable suricata IPS as a service\n\n```\nsudo systemctl enable suricata.service\nsudo systemctl start suricata.service\nsudo systemctl status suricata.service\n```\n\n### set up IPS iptables\nget rid of INPUT, OUTPUT chain completely\n```\nsudo iptables-save > iptables\nnano iptables\nsudo iptables-restore < iptables\n```\n\nthen run these commands\n```\nsudo iptables -I INPUT -j NFQUEUE --queue-num 0\nsudo iptables -I OUTPUT -j NFQUEUE --queue-num 0\nsudo iptables -I FORWARD -j NFQUEUE --queue-num 0\n```\n\n### suricata.yaml\n```\nrule-files:\n    - /path/to/your/rules\n```\n\n### custom rule\ndrop http $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"ET WEB_SERVER Script tag in URI Possible Cross Site Scripting Attempt\"; flow:to_server,established; http.uri; content:\"</script>\"; nocase; reference:url,ha.ckers.org/xss.html; reference:url,doc.emergingthreats.net/2009714; classtype:web-application-attack; sid:2009714; rev:8; metadata:affected_product Web_Server_Applications, attack_target Web_Server, created_at 2010_07_30, deployment Datacenter, former_category WEB_SERVER, signature_severity Major, tag XSS, tag Cross_Site_Scripting, updated_at 2020_08_20;)\n\n```\nsudo systemctl restart suricata.service\n```\n\n### navigate to localhost:8080, where you use post XSS",
    "solution_penalized" : true,
    "hints" : [ {
      "title" : "xss",
      "content" : "you can get inspired by an existing ET/OPEN rule",
      "hint_penalty" : 2,
      "order" : 0
    } ],
    "incorrect_answer_limit" : 100,
    "attachments" : [ ],
    "max_score" : 10,
    "variant_answers" : true,
    "reference_solution" : [ ],
    "mitre_techniques" : [ ],
    "expected_commands" : [ ],
    "commands_required" : true
  } ],
  "estimated_duration" : 6,
  "variant_sandboxes" : false
}