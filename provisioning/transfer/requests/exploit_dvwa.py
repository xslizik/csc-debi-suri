import requests
import sys
import base64

TIMEOUT = 2

successful = 0
flags = [False for _ in range(4)]

def decode_string(encoded_string):
    return base64.b64decode(encoded_string).decode('utf-8')

def check(flag):
    global flags
    global successful

    if not flags[flag]:
        flags[flag] = True
        successful += 1
        print(decode_string("dW5pcXVlIHN1Y2Nlc3NmdWwgYmxvY2tz"), successful)
        if successful == 2:
            print("$")
            sys.exit(0)

def send_request(flag, url, method, headers, data=None, params=None, timeout=TIMEOUT):
    try:
        if method == "POST":
            response = requests.post(url, headers=headers, data=data, timeout=timeout)
        elif method == "GET":
            response = requests.get(url, headers=headers, params=params, timeout=timeout)
        return response.text
    except requests.exceptions.Timeout:
        check(flag)
        return False

def exploit_sql_injection(payload="1' OR '1'='1"):
    url = "http://10.10.20.5/vulnerabilities/sqli/"
    method = "GET"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
        "Upgrade-Insecure-Requests": "1",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Referer": "http://10.10.20.5/vulnerabilities/sqli/",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9",
        "Cookie": "security=low; PHPSESSID=7dccf9917ddd474182350af1da4f5327"
    }
    params = {
        "id": payload,
        "Submit": "Submit"
    }
    
    return send_request(0, url, method, headers, params=params)

def exploit_command_injenction(payload="127.0.0.1|cat /etc/passwd"):
    url = "http://10.10.20.5/vulnerabilities/exec/"
    method = "POST"
    headers = {
        "Host": "10.10.20.5",
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "Origin": "http://10.10.20.5",
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Referer": "http://10.10.20.5/vulnerabilities/exec/",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9",
        "Cookie": "security=low; PHPSESSID=f606014cc37c60e1f8bd831498d96af4",
        "Connection": "close"
    }
    params = {
        "ip": payload,
        "Submit": "Submit"
    }

    return send_request(1, url, method, headers, params=params)

def exploit_brute_force(username="admin", password="password"):
    url = "http://10.10.20.5/vulnerabilities/brute/"
    method = "GET"
    headers = {
        "Host": "10.10.20.5",
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "Origin": "http://10.10.20.5",
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Referer": "http://10.10.20.5/vulnerabilities/brute/?username=uwu&password=123&Login=Login",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9",
        "Cookie": "security=low; PHPSESSID=888ef19fd637baf5dfbff0590c0e6399",
        "Connection": "close"
    }
    params = {
        "username": username,
        "password": password,
        "Login": "Login"
    }

    return send_request(2, url, method, headers, params=params)

def exploit_reflected_xss(payload="<script> alert(\"uwu\"); </script>"):
    url = "http://10.10.20.5/vulnerabilities/xss_r/"
    method = "GET"
    headers = {
        "Host": "10.10.20.5",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Referer": "http://10.10.20.5/vulnerabilities/xss_r/",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9",
        "Cookie": "security=low; PHPSESSID=888ef19fd637baf5dfbff0590c0e6399",
        "Connection": "close"
    }
    params = {
        "name": payload
    }

    return send_request(3, url, method, headers, params=params)

def end():
    print(decode_string("TWFrZSBzdXJlIGJhc2ljIGZ1bmN0aW9uYWxpdGllcyBhcmUgd29ya2luZw=="))
    sys.exit(-1)

def main():
    print("Malicious requests for DVWA")
    print("\nSelect option:\
        \n\t(0) SQL Injenction\
        \n\t(1) Login as Admin\
        \n\t(2) Reflected XSS\
        \n\tPress -x- to exit\n");    
    while True:
        try:
            selection = input()
        except NameError:
            selection = 'x'
        selection = str(selection)
        if selection == '0':
            print("Executing SQL Injenction")
            if exploit_sql_injection(payload="1"):
                response = exploit_sql_injection()
                if response:
                    print(response)
                    print("block unsuccessful")
            else:
                end()
        elif selection == '1':
            print("Executing Login as Admin")
            if exploit_brute_force(username="uwu"):
                response = exploit_brute_force()
                if response:
                    print(response)
                    print("block unsuccessful")
            else:
                end()
        elif selection == '2':
            print("Executing Reflected XSS")
            response = exploit_reflected_xss()
            if exploit_reflected_xss(payload="owo"):
                if response:
                    print(response)
                    print("block unsuccessful")
            else:
                end()
        #elif selection == '3':
        #    print("Executing Command Injenction")
        #    if exploit_command_injenction(payload="127.0.0.1"):
        #        response = exploit_command_injenction()
        #        if response:
        #            print(response)
        #            print("block unsuccessful")
        #    else:
        #        end()     
        elif selection == 'x':
            print(decode_string("RXhpdGluZy4u"))
            return
        else:
            print(decode_string("WW91IGhhdmUgc2VsZWN0ZWQgd3Jvbmcgb3B0aW9uIHRyeSBhZ2Fpbi4="))

if __name__ == "__main__":
    main()